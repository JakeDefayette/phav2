export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

// Generated by Supabase CLI on schema update
export type Database = {
  public: {
    Tables: {
      analytics_events: {
        Row: {
          assessment_id: string | null;
          created_at: string | null;
          event_data: Json | null;
          event_type: string;
          id: string;
          ip_address: unknown | null;
          practice_id: string | null;
          referrer: string | null;
          report_id: string | null;
          user_agent: string | null;
        };
        Insert: {
          assessment_id?: string | null;
          created_at?: string | null;
          event_data?: Json | null;
          event_type: string;
          id?: string;
          ip_address?: unknown | null;
          practice_id?: string | null;
          referrer?: string | null;
          report_id?: string | null;
          user_agent?: string | null;
        };
        Update: {
          assessment_id?: string | null;
          created_at?: string | null;
          event_data?: Json | null;
          event_type?: string;
          id?: string;
          ip_address?: unknown | null;
          practice_id?: string | null;
          referrer?: string | null;
          report_id?: string | null;
          user_agent?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'analytics_events_assessment_id_fkey';
            columns: ['assessment_id'];
            isOneToOne: false;
            referencedRelation: 'assessments';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'analytics_events_practice_id_fkey';
            columns: ['practice_id'];
            isOneToOne: false;
            referencedRelation: 'practices';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'analytics_events_report_id_fkey';
            columns: ['report_id'];
            isOneToOne: false;
            referencedRelation: 'reports';
            referencedColumns: ['id'];
          },
        ];
      };
      assessments: {
        Row: {
          brain_o_meter_score: number | null;
          child_id: string | null;
          completed_at: string | null;
          created_at: string | null;
          id: string;
          lifestyle_responses: Json | null;
          organ_systems: Json | null;
          parent_email: string;
          parent_name: string | null;
          parent_phone: string | null;
          practice_id: string;
          recommendations: string | null;
          report_generated_at: string | null;
          shared_count: number | null;
          source: string | null;
          spinal_concerns: Json | null;
          status: Database['public']['Enums']['assessment_status'] | null;
          symptoms_responses: Json | null;
          updated_at: string | null;
        };
        Insert: {
          brain_o_meter_score?: number | null;
          child_id?: string | null;
          completed_at?: string | null;
          created_at?: string | null;
          id?: string;
          lifestyle_responses?: Json | null;
          organ_systems?: Json | null;
          parent_email: string;
          parent_name?: string | null;
          parent_phone?: string | null;
          practice_id: string;
          recommendations?: string | null;
          report_generated_at?: string | null;
          shared_count?: number | null;
          source?: string | null;
          spinal_concerns?: Json | null;
          status?: Database['public']['Enums']['assessment_status'] | null;
          symptoms_responses?: Json | null;
          updated_at?: string | null;
        };
        Update: {
          brain_o_meter_score?: number | null;
          child_id?: string | null;
          completed_at?: string | null;
          created_at?: string | null;
          id?: string;
          lifestyle_responses?: Json | null;
          organ_systems?: Json | null;
          parent_email?: string;
          parent_name?: string | null;
          parent_phone?: string | null;
          practice_id?: string;
          recommendations?: string | null;
          report_generated_at?: string | null;
          shared_count?: number | null;
          source?: string | null;
          spinal_concerns?: Json | null;
          status?: Database['public']['Enums']['assessment_status'] | null;
          symptoms_responses?: Json | null;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'assessments_child_id_fkey';
            columns: ['child_id'];
            isOneToOne: false;
            referencedRelation: 'children';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'assessments_practice_id_fkey';
            columns: ['practice_id'];
            isOneToOne: false;
            referencedRelation: 'practices';
            referencedColumns: ['id'];
          },
        ];
      };
      children: {
        Row: {
          created_at: string | null;
          date_of_birth: string | null;
          first_name: string;
          gender: string | null;
          id: string;
          last_name: string | null;
          parent_id: string | null;
          updated_at: string | null;
        };
        Insert: {
          created_at?: string | null;
          date_of_birth?: string | null;
          first_name: string;
          gender?: string | null;
          id?: string;
          last_name?: string | null;
          parent_id?: string | null;
          updated_at?: string | null;
        };
        Update: {
          created_at?: string | null;
          date_of_birth?: string | null;
          first_name?: string;
          gender?: string | null;
          id?: string;
          last_name?: string | null;
          parent_id?: string | null;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'children_parent_id_fkey';
            columns: ['parent_id'];
            isOneToOne: false;
            referencedRelation: 'user_profiles';
            referencedColumns: ['id'];
          },
        ];
      };
      content_library: {
        Row: {
          category: string | null;
          content: string;
          content_type: string | null;
          created_at: string | null;
          id: string;
          is_premium: boolean | null;
          tags: string[] | null;
          title: string;
          updated_at: string | null;
        };
        Insert: {
          category?: string | null;
          content: string;
          content_type?: string | null;
          created_at?: string | null;
          id?: string;
          is_premium?: boolean | null;
          tags?: string[] | null;
          title: string;
          updated_at?: string | null;
        };
        Update: {
          category?: string | null;
          content?: string;
          content_type?: string | null;
          created_at?: string | null;
          id?: string;
          is_premium?: boolean | null;
          tags?: string[] | null;
          title?: string;
          updated_at?: string | null;
        };
        Relationships: [];
      };
      email_campaigns: {
        Row: {
          click_count: number | null;
          click_rate: number | null;
          content: string;
          created_at: string | null;
          frequency: string | null;
          id: string;
          is_active: boolean | null;
          last_sent_at: string | null;
          name: string;
          open_count: number | null;
          open_rate: number | null;
          practice_id: string;
          recipient_count: number | null;
          scheduled_at: string | null;
          send_count: number | null;
          sent_at: string | null;
          subject: string;
          template_id: string | null;
          template_type: string | null;
          updated_at: string | null;
        };
        Insert: {
          click_count?: number | null;
          click_rate?: number | null;
          content: string;
          created_at?: string | null;
          frequency?: string | null;
          id?: string;
          is_active?: boolean | null;
          last_sent_at?: string | null;
          name: string;
          open_count?: number | null;
          open_rate?: number | null;
          practice_id: string;
          recipient_count?: number | null;
          scheduled_at?: string | null;
          send_count?: number | null;
          sent_at?: string | null;
          subject: string;
          template_id?: string | null;
          template_type?: string | null;
          updated_at?: string | null;
        };
        Update: {
          click_count?: number | null;
          click_rate?: number | null;
          content?: string;
          created_at?: string | null;
          frequency?: string | null;
          id?: string;
          is_active?: boolean | null;
          last_sent_at?: string | null;
          name?: string;
          open_count?: number | null;
          open_rate?: number | null;
          practice_id?: string;
          recipient_count?: number | null;
          scheduled_at?: string | null;
          send_count?: number | null;
          sent_at?: string | null;
          subject?: string;
          template_id?: string | null;
          template_type?: string | null;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'email_campaigns_practice_id_fkey';
            columns: ['practice_id'];
            isOneToOne: false;
            referencedRelation: 'practices';
            referencedColumns: ['id'];
          },
        ];
      };
      email_sends: {
        Row: {
          bounced_at: string | null;
          campaign_id: string;
          clicked_at: string | null;
          created_at: string | null;
          id: string;
          opened_at: string | null;
          practice_id: string;
          sent_at: string | null;
          status: string | null;
          subscriber_id: string;
          unsubscribed_at: string | null;
        };
        Insert: {
          bounced_at?: string | null;
          campaign_id: string;
          clicked_at?: string | null;
          created_at?: string | null;
          id?: string;
          opened_at?: string | null;
          practice_id: string;
          sent_at?: string | null;
          status?: string | null;
          subscriber_id: string;
          unsubscribed_at?: string | null;
        };
        Update: {
          bounced_at?: string | null;
          campaign_id?: string;
          clicked_at?: string | null;
          created_at?: string | null;
          id?: string;
          opened_at?: string | null;
          practice_id?: string;
          sent_at?: string | null;
          status?: string | null;
          subscriber_id?: string;
          unsubscribed_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'email_sends_campaign_id_fkey';
            columns: ['campaign_id'];
            isOneToOne: false;
            referencedRelation: 'email_campaigns';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'email_sends_practice_id_fkey';
            columns: ['practice_id'];
            isOneToOne: false;
            referencedRelation: 'practices';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'email_sends_subscriber_id_fkey';
            columns: ['subscriber_id'];
            isOneToOne: false;
            referencedRelation: 'email_subscribers';
            referencedColumns: ['id'];
          },
        ];
      };
      email_subscribers: {
        Row: {
          created_at: string | null;
          email: string;
          id: string;
          name: string | null;
          practice_id: string;
          source: string | null;
          status: string | null;
          subscribed_at: string | null;
          unsubscribed_at: string | null;
          updated_at: string | null;
        };
        Insert: {
          created_at?: string | null;
          email: string;
          id?: string;
          name?: string | null;
          practice_id: string;
          source?: string | null;
          status?: string | null;
          subscribed_at?: string | null;
          unsubscribed_at?: string | null;
          updated_at?: string | null;
        };
        Update: {
          created_at?: string | null;
          email?: string;
          id?: string;
          name?: string | null;
          practice_id?: string;
          source?: string | null;
          status?: string | null;
          subscribed_at?: string | null;
          unsubscribed_at?: string | null;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'email_subscribers_practice_id_fkey';
            columns: ['practice_id'];
            isOneToOne: false;
            referencedRelation: 'practices';
            referencedColumns: ['id'];
          },
        ];
      };
      practice_analytics: {
        Row: {
          created_at: string;
          id: string;
          metadata: Json | null;
          metric_name: Database['public']['Enums']['analytics_metric_enum'];
          metric_value: number;
          period_end: string;
          period_start: string;
          practice_id: string;
          time_period: string;
          updated_at: string;
        };
        Insert: {
          created_at?: string;
          id?: string;
          metadata?: Json | null;
          metric_name: Database['public']['Enums']['analytics_metric_enum'];
          metric_value?: number;
          period_end: string;
          period_start: string;
          practice_id: string;
          time_period: string;
          updated_at?: string;
        };
        Update: {
          created_at?: string;
          id?: string;
          metadata?: Json | null;
          metric_name?: Database['public']['Enums']['analytics_metric_enum'];
          metric_value?: number;
          period_end?: string;
          period_start?: string;
          practice_id?: string;
          time_period?: string;
          updated_at?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'practice_analytics_practice_id_fkey';
            columns: ['practice_id'];
            isOneToOne: false;
            referencedRelation: 'practices';
            referencedColumns: ['id'];
          },
        ];
      };
      practice_content: {
        Row: {
          content_library_id: string | null;
          created_at: string | null;
          custom_content: string | null;
          custom_title: string | null;
          id: string;
          is_active: boolean | null;
          practice_id: string;
          updated_at: string | null;
        };
        Insert: {
          content_library_id?: string | null;
          created_at?: string | null;
          custom_content?: string | null;
          custom_title?: string | null;
          id?: string;
          is_active?: boolean | null;
          practice_id: string;
          updated_at?: string | null;
        };
        Update: {
          content_library_id?: string | null;
          created_at?: string | null;
          custom_content?: string | null;
          custom_title?: string | null;
          id?: string;
          is_active?: boolean | null;
          practice_id?: string;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'practice_content_content_library_id_fkey';
            columns: ['content_library_id'];
            isOneToOne: false;
            referencedRelation: 'content_library';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'practice_content_practice_id_fkey';
            columns: ['practice_id'];
            isOneToOne: false;
            referencedRelation: 'practices';
            referencedColumns: ['id'];
          },
        ];
      };
      practices: {
        Row: {
          address: string | null;
          city: string | null;
          created_at: string | null;
          custom_video_url: string | null;
          email: string | null;
          id: string;
          logo_url: string | null;
          name: string;
          owner_id: string | null;
          phone: string | null;
          primary_color: string | null;
          secondary_color: string | null;
          state: string | null;
          subscription_expires_at: string | null;
          subscription_plan: string | null;
          subscription_status:
            | Database['public']['Enums']['subscription_status']
            | null;
          subscription_tier: Database['public']['Enums']['subscription_tier_enum'];
          trial_ends_at: string | null;
          updated_at: string | null;
          website: string | null;
          zip_code: string | null;
        };
        Insert: {
          address?: string | null;
          city?: string | null;
          created_at?: string | null;
          custom_video_url?: string | null;
          email?: string | null;
          id?: string;
          logo_url?: string | null;
          name: string;
          owner_id?: string | null;
          phone?: string | null;
          primary_color?: string | null;
          secondary_color?: string | null;
          state?: string | null;
          subscription_expires_at?: string | null;
          subscription_plan?: string | null;
          subscription_status?:
            | Database['public']['Enums']['subscription_status']
            | null;
          subscription_tier?: Database['public']['Enums']['subscription_tier_enum'];
          trial_ends_at?: string | null;
          updated_at?: string | null;
          website?: string | null;
          zip_code?: string | null;
        };
        Update: {
          address?: string | null;
          city?: string | null;
          created_at?: string | null;
          custom_video_url?: string | null;
          email?: string | null;
          id?: string;
          logo_url?: string | null;
          name?: string;
          owner_id?: string | null;
          phone?: string | null;
          primary_color?: string | null;
          secondary_color?: string | null;
          state?: string | null;
          subscription_expires_at?: string | null;
          subscription_plan?: string | null;
          subscription_status?:
            | Database['public']['Enums']['subscription_status']
            | null;
          subscription_tier?: Database['public']['Enums']['subscription_tier_enum'];
          trial_ends_at?: string | null;
          updated_at?: string | null;
          website?: string | null;
          zip_code?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'practices_owner_id_fkey';
            columns: ['owner_id'];
            isOneToOne: false;
            referencedRelation: 'user_profiles';
            referencedColumns: ['id'];
          },
        ];
      };
      profiles: {
        Row: {
          created_at: string | null;
          email: string;
          full_name: string | null;
          id: string;
          phone: string | null;
          role: Database['public']['Enums']['user_role_enum'];
          updated_at: string | null;
        };
        Insert: {
          created_at?: string | null;
          email: string;
          full_name?: string | null;
          id: string;
          phone?: string | null;
          role: Database['public']['Enums']['user_role_enum'];
          updated_at?: string | null;
        };
        Update: {
          created_at?: string | null;
          email?: string;
          full_name?: string | null;
          id?: string;
          phone?: string | null;
          role?: Database['public']['Enums']['user_role_enum'];
          updated_at?: string | null;
        };
        Relationships: [];
      };
      report_shares: {
        Row: {
          conversion_assessment_id: string | null;
          converted_to_assessment: boolean;
          created_at: string;
          id: string;
          recipient_email: string;
          report_id: string;
          share_method: Database['public']['Enums']['share_method_enum'];
          share_token: string;
          shared_by_user_id: string | null;
          updated_at: string;
          viewed_at: string | null;
        };
        Insert: {
          conversion_assessment_id?: string | null;
          converted_to_assessment?: boolean;
          created_at?: string;
          id?: string;
          recipient_email: string;
          report_id: string;
          share_method: Database['public']['Enums']['share_method_enum'];
          share_token: string;
          shared_by_user_id?: string | null;
          updated_at?: string;
          viewed_at?: string | null;
        };
        Update: {
          conversion_assessment_id?: string | null;
          converted_to_assessment?: boolean;
          created_at?: string;
          id?: string;
          recipient_email?: string;
          report_id?: string;
          share_method?: Database['public']['Enums']['share_method_enum'];
          share_token?: string;
          shared_by_user_id?: string | null;
          updated_at?: string;
          viewed_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'report_shares_conversion_assessment_id_fkey';
            columns: ['conversion_assessment_id'];
            isOneToOne: false;
            referencedRelation: 'assessments';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'report_shares_report_id_fkey';
            columns: ['report_id'];
            isOneToOne: false;
            referencedRelation: 'reports';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'report_shares_shared_by_user_id_fkey';
            columns: ['shared_by_user_id'];
            isOneToOne: false;
            referencedRelation: 'user_profiles';
            referencedColumns: ['id'];
          },
        ];
      };
      reports: {
        Row: {
          assessment_id: string;
          created_at: string | null;
          id: string;
          last_viewed_at: string | null;
          pdf_url: string | null;
          practice_id: string | null;
          share_count: number | null;
          share_token: string | null;
          updated_at: string | null;
          view_count: number | null;
        };
        Insert: {
          assessment_id: string;
          created_at?: string | null;
          id?: string;
          last_viewed_at?: string | null;
          pdf_url?: string | null;
          practice_id?: string | null;
          share_count?: number | null;
          share_token?: string | null;
          updated_at?: string | null;
          view_count?: number | null;
        };
        Update: {
          assessment_id?: string;
          created_at?: string | null;
          id?: string;
          last_viewed_at?: string | null;
          pdf_url?: string | null;
          practice_id?: string | null;
          share_count?: number | null;
          share_token?: string | null;
          updated_at?: string | null;
          view_count?: number | null;
        };
        Relationships: [
          {
            foreignKeyName: 'reports_assessment_id_fkey';
            columns: ['assessment_id'];
            isOneToOne: false;
            referencedRelation: 'assessments';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'reports_practice_id_fkey';
            columns: ['practice_id'];
            isOneToOne: false;
            referencedRelation: 'practices';
            referencedColumns: ['id'];
          },
        ];
      };
      survey_question_definitions: {
        Row: {
          category: string | null;
          created_at: string;
          id: string;
          is_required: boolean;
          options: Json | null;
          order_index: number;
          question_text: string;
          question_type: Database['public']['Enums']['question_type_enum'];
          updated_at: string;
          validation_rules: Json | null;
        };
        Insert: {
          category?: string | null;
          created_at?: string;
          id?: string;
          is_required?: boolean;
          options?: Json | null;
          order_index: number;
          question_text: string;
          question_type: Database['public']['Enums']['question_type_enum'];
          updated_at?: string;
          validation_rules?: Json | null;
        };
        Update: {
          category?: string | null;
          created_at?: string;
          id?: string;
          is_required?: boolean;
          options?: Json | null;
          order_index?: number;
          question_text?: string;
          question_type?: Database['public']['Enums']['question_type_enum'];
          updated_at?: string;
          validation_rules?: Json | null;
        };
        Relationships: [];
      };
      survey_responses: {
        Row: {
          assessment_id: string;
          created_at: string;
          id: string;
          question_id: string;
          response_value: Json;
          updated_at: string;
        };
        Insert: {
          assessment_id: string;
          created_at?: string;
          id?: string;
          question_id: string;
          response_value: Json;
          updated_at?: string;
        };
        Update: {
          assessment_id?: string;
          created_at?: string;
          id?: string;
          question_id?: string;
          response_value?: Json;
          updated_at?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'survey_responses_assessment_id_fkey';
            columns: ['assessment_id'];
            isOneToOne: false;
            referencedRelation: 'assessments';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'survey_responses_question_id_fkey';
            columns: ['question_id'];
            isOneToOne: false;
            referencedRelation: 'survey_question_definitions';
            referencedColumns: ['id'];
          },
        ];
      };
      user_profiles: {
        Row: {
          createdAt: string | null;
          email: string;
          first_name: string | null;
          id: string;
          last_name: string | null;
          phone: string | null;
          practice_id: string | null;
          role: Database['public']['Enums']['user_role_enum'];
          updatedAt: string | null;
        };
        Insert: {
          createdAt?: string | null;
          email: string;
          first_name?: string | null;
          id: string;
          last_name?: string | null;
          phone?: string | null;
          practice_id?: string | null;
          role?: Database['public']['Enums']['user_role_enum'];
          updatedAt?: string | null;
        };
        Update: {
          createdAt?: string | null;
          email?: string;
          first_name?: string | null;
          id?: string;
          last_name?: string | null;
          phone?: string | null;
          practice_id?: string | null;
          role?: Database['public']['Enums']['user_role_enum'];
          updatedAt?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'fk_user_profiles_practice';
            columns: ['practice_id'];
            isOneToOne: false;
            referencedRelation: 'practices';
            referencedColumns: ['id'];
          },
        ];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      calculate_brain_o_meter_score: {
        Args: { lifestyle_data: Json; symptoms_data: Json };
        Returns: number;
      };
      create_test_auth_user: {
        Args: { user_id: string; user_email: string };
        Returns: undefined;
      };
      ensure_user_profile: {
        Args: { user_id: string };
        Returns: undefined;
      };
      generate_share_token: {
        Args: Record<PropertyKey, never>;
        Returns: string;
      };
      get_practice_stats: {
        Args: { practice_uuid: string };
        Returns: Json;
      };
      increment_assessment_shares: {
        Args: { assessment_uuid: string };
        Returns: undefined;
      };
      increment_report_views: {
        Args: { report_uuid: string };
        Returns: undefined;
      };
    };
    Enums: {
      analytics_metric_enum:
        | 'assessments_completed'
        | 'reports_generated'
        | 'reports_shared'
        | 'email_opens'
        | 'email_clicks'
        | 'referrals_generated'
        | 'conversion_rate';
      assessment_status: 'draft' | 'completed' | 'shared';
      assessment_status_enum: 'in_progress' | 'completed' | 'abandoned';
      campaign_status_enum:
        | 'draft'
        | 'scheduled'
        | 'sending'
        | 'sent'
        | 'cancelled';
      email_status_enum:
        | 'pending'
        | 'sent'
        | 'delivered'
        | 'opened'
        | 'clicked'
        | 'bounced'
        | 'failed';
      email_template_type_enum:
        | 'welcome'
        | 'assessment_complete'
        | 'report_share'
        | 'campaign'
        | 'reminder';
      gender_enum: 'male' | 'female' | 'other' | 'prefer_not_to_say';
      question_type_enum:
        | 'multiple_choice'
        | 'text'
        | 'number'
        | 'boolean'
        | 'scale'
        | 'date';
      share_method_enum: 'email' | 'sms' | 'social' | 'direct_link';
      subscription_source_enum:
        | 'website'
        | 'assessment'
        | 'referral'
        | 'import';
      subscription_status: 'trial' | 'active' | 'cancelled' | 'expired';
      subscription_tier_enum: 'basic' | 'premium' | 'enterprise';
      user_role_enum: 'parent' | 'practitioner' | 'admin';
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
};

type DefaultSchema = Database[Extract<keyof Database, 'public'>];

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema['Tables'] & DefaultSchema['Views'])
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof (Database[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &
        Database[DefaultSchemaTableNameOrOptions['schema']]['Views'])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? (Database[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &
      Database[DefaultSchemaTableNameOrOptions['schema']]['Views'])[TableName] extends {
      Row: infer R;
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema['Tables'] &
        DefaultSchema['Views'])
    ? (DefaultSchema['Tables'] &
        DefaultSchema['Views'])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R;
      }
      ? R
      : never
    : never;

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema['Tables']
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions['schema']]['Tables']
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Insert: infer I;
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']
    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I;
      }
      ? I
      : never
    : never;

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema['Tables']
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions['schema']]['Tables']
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Update: infer U;
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']
    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U;
      }
      ? U
      : never
    : never;

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema['Enums']
    | { schema: keyof Database },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[DefaultSchemaEnumNameOrOptions['schema']]['Enums']
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaEnumNameOrOptions['schema']]['Enums'][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema['Enums']
    ? DefaultSchema['Enums'][DefaultSchemaEnumNameOrOptions]
    : never;

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema['CompositeTypes']
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes']
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes'][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema['CompositeTypes']
    ? DefaultSchema['CompositeTypes'][PublicCompositeTypeNameOrOptions]
    : never;

export const Constants = {
  public: {
    Enums: {
      analytics_metric_enum: [
        'assessments_completed',
        'reports_generated',
        'reports_shared',
        'email_opens',
        'email_clicks',
        'referrals_generated',
        'conversion_rate',
      ],
      assessment_status: ['draft', 'completed', 'shared'],
      assessment_status_enum: ['in_progress', 'completed', 'abandoned'],
      campaign_status_enum: [
        'draft',
        'scheduled',
        'sending',
        'sent',
        'cancelled',
      ],
      email_status_enum: [
        'pending',
        'sent',
        'delivered',
        'opened',
        'clicked',
        'bounced',
        'failed',
      ],
      email_template_type_enum: [
        'welcome',
        'assessment_complete',
        'report_share',
        'campaign',
        'reminder',
      ],
      gender_enum: ['male', 'female', 'other', 'prefer_not_to_say'],
      question_type_enum: [
        'multiple_choice',
        'text',
        'number',
        'boolean',
        'scale',
        'date',
      ],
      share_method_enum: ['email', 'sms', 'social', 'direct_link'],
      subscription_source_enum: ['website', 'assessment', 'referral', 'import'],
      subscription_status: ['trial', 'active', 'cancelled', 'expired'],
      subscription_tier_enum: ['basic', 'premium', 'enterprise'],
      user_role_enum: ['parent', 'practitioner', 'admin'],
    },
  },
} as const;

// Convenience type exports
export type Practice = Tables<'practices'>;
