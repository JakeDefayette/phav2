# Task ID: 14
# Title: Optimize for Performance and Bundle Size
# Status: pending
# Dependencies: 1, 4, 5
# Priority: high
# Description: Optimize application for fast load times and minimal bundle size within the new feature-based architecture.
# Details:
Implement code splitting, tree-shaking, and dynamic imports across all feature modules. Enforce file size limits (React components <200 lines, utility functions <100 lines, etc.). Use Lighthouse CI and bundle analyzer. Target initial load <50KB, route chunks <25KB, total app <200KB gzipped. Optimize imports to leverage the new directory structure.

# Test Strategy:
Run Lighthouse audits, bundle analysis, and performance tests in src/shared/__tests__/performance/.

# Subtasks:
## 1. Analyze current bundle size and performance metrics [done]
### Dependencies: None
### Description: Establish baseline performance by measuring current bundle sizes and identifying performance bottlenecks
### Details:
Use Webpack Bundle Analyzer to generate visualizations of bundle composition and size. Identify large modules, redundant code, and potential splitting points. Document current load times and performance metrics for later comparison.
<info added on 2025-06-05T10:57:27.337Z>
âœ… Baseline Analysis Complete - Key Findings:

**Critical Issues Identified:**
- Shared JS bundles: 102KB total (46.4KB + 53.2KB + 2.34KB) - exceeds 50KB target by 104%
- Dashboard routes consistently ~1MB each - far exceeding targets
- No effective code splitting - heavy shared dependencies loaded for all routes

**Major Bundle Bloat Sources:**
1. Multiple chart libraries (Chart.js + Recharts) causing duplication
2. @react-pdf/renderer loaded for all routes (only needed occasionally)
3. Complete Supabase client with potentially unused features
4. Form libraries (Formik + Yup) loaded globally

**Optimization Priorities Established:**
1. Split the 46.4KB vendor chunk (likely React/Next.js + chart libraries)
2. Split the 53.2KB app chunk (probably dashboard + feature code)
3. Implement feature-based code splitting for dashboard (~970KB avg), reports (~1.04MB), videos (~990KB)
4. Dynamic import PDF renderer and chart libraries

**Performance Tests Created:**
- Baseline analysis documented in `src/shared/__tests__/performance/baseline-analysis.md`
- Automated bundle metrics test in `src/shared/__tests__/performance/bundle-metrics.test.js`
- Bundle analyzer reports generated in `.next/analyze/`

**Ready for 14.2:** Code splitting targets identified and prioritized. Next step is configuring SplitChunksPlugin with feature-based caching groups.
</info added on 2025-06-05T10:57:27.337Z>

## 2. Implement code splitting across feature modules [pending]
### Dependencies: 14.1
### Description: Split code into separate bundles based on feature modules to enable on-demand loading
### Details:
Use Webpack's SplitChunksPlugin to dedupe and split chunks. Configure entry points for major feature modules. Create independent domains that can be loaded separately. Focus on isolating modules to maximize the effectiveness of code splitting.

## 3. Apply tree-shaking and remove unused code [pending]
### Dependencies: 14.1
### Description: Eliminate dead code and unused dependencies to reduce overall bundle size
### Details:
Configure Webpack for production mode to enable tree-shaking. Audit and remove unused imports, functions, and components. Update import statements to use named exports instead of default exports where possible to improve tree-shaking effectiveness.

## 4. Set up and enforce file size limits for components and utilities [pending]
### Dependencies: 14.1, 14.3
### Description: Establish maximum size thresholds for individual components and utility modules
### Details:
Configure bundle size limits in the build process. Create automated checks that fail builds when components exceed size limits. Document size guidelines for developers and implement a review process for exceptions.

## 5. Integrate dynamic imports where appropriate [pending]
### Dependencies: 14.2
### Description: Implement on-demand loading for non-critical components and features
### Details:
Replace static imports with dynamic import() syntax for components that aren't needed at initial page load. Focus on components that are conditionally rendered or only appear after user interaction. Implement loading states for dynamically imported components.

## 6. Configure and run Lighthouse CI and bundle analyzer tools [pending]
### Dependencies: 14.2, 14.3, 14.5
### Description: Set up automated performance monitoring and bundle analysis in the CI pipeline
### Details:
Integrate Webpack Bundle Analyzer into the CI process. Configure Lighthouse CI to run performance audits on each build. Set up alerts for performance regressions and bundle size increases. Create dashboards to visualize performance trends over time.

## 7. Optimize imports to align with new directory structure and verify improvements [pending]
### Dependencies: 14.2, 14.3, 14.4, 14.5, 14.6
### Description: Refactor import statements to match the optimized structure and validate performance gains
### Details:
Update import paths to reflect the new modular structure. Compare before/after performance metrics to quantify improvements. Document the optimization process and results. Create guidelines for maintaining optimized bundle sizes in future development.

